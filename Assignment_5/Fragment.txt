//Fragment Shader

precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform float time;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;
varying vec3 heat;
const float jump_coeff = 5e-1;  // Growth Value

vec3 hsl2rgb( vec3 c ) {
    vec3 rgb = clamp(abs(mod(c.x*6.0 + vec3(0.0, 4.0, 2.0), 6.0)-3.0)-1.0, 0.0, 1.0);
    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));
}

void main()
{
  float epan = float(0.35*sin(10.0*time) + 0.35);  // Growth and Color change
  heat = vec3(hsl2rgb(vec3(epan, 1.0, 0.3)));  // Generate R - G - B HSL
  
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  pos += vec4(fNormal, 1.0) *jump_coeff * epan;
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
}