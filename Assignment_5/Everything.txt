Link -Basic

https://goo.gl/5F8JxN

Two diffuse lights, one above and one below, added with ambient lighting. 


Fragment Shader - Basic

precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;

const float ambient_coeff   = 0.25;
const float difuse_coeff  = 1.0;
const vec3 light_dir1 = vec3(0,1.0,0.0); // stationary light
const vec3 light_col1 = vec3(1.0,0.5,0.0);
const vec3 light_dir2 = vec3(0.0,-1.0,0.0);
const vec3 light_col2 = vec3(0.0,0.5,1.0);
const vec3 object_color = vec3(0.0,1.0,1.0); // yellow-ish orange

void main()
{
  vec3 l1 = normalize(light_dir1);
  vec3 l2 = normalize(light_dir2);
  vec3 n = normalize(fNormal);

  vec3 ambient_color  = ambient_coeff  * object_color;
  vec3 difuse1 = difuse_coeff * max(0.0, dot(l1,n)) * light_col1;
  vec3 difuse2 = difuse_coeff * max(0.0, dot(l2,n)) * light_col2;

  gl_FragColor = vec4(ambient_color + difuse1 + difuse2, 1.0);
}

Vertex Shader - Basic

precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;  //Transform Normal
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;

void main()
{
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
}



Link - Cool

https://goo.gl/wrlGKD

Vertex shader causes expansion and contraction along normal. Fragment shader does a heatmap type coloring for expansion as well as outlining and diffuse lighting

Fragment Shader - Cool

precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform float time;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;
varying vec3 heat;
const float jump_coeff = 5e-1;  // Growth Value

vec3 hsl2rgb( vec3 c ) {
    vec3 rgb = clamp(abs(mod(c.x*6.0 + vec3(0.0, 4.0, 2.0), 6.0)-3.0)-1.0, 0.0, 1.0);
    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));
}

void main()
{
  float epan = float(0.35*sin(10.0*time) + 0.35);  // Growth and Color change
  heat = vec3(hsl2rgb(vec3(epan, 1.0, 0.3)));  // Generate R - G - B HSL
  
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  pos += vec4(fNormal, 1.0) *jump_coeff * epan;
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
}

Vertex Shader - Cool

precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;

varying vec3 heat;
const float ambient_coeff = 0.5;
const vec3 ambient_col = vec3(1.0,0.3,0.0);

const float dif_coeff = 1.0;
const vec3 dif_pos = vec3(0.0,1.0,0.0);
const vec3 dif_col = vec3(1.0,1.0,1.0);

vec3 rim(vec3 color, float start, float end, float coef) {
  vec3 normal = normalize(fNormal);
  vec3 eye = normalize(-fPosition.xyz);
  float rim = smoothstep(start, end, 1.0 - dot(normal, eye));
  return clamp(rim, 0.0, 1.0) * coef * color;
}

void main() {
  vec3 outline = rim(vec3(1,1,1), 0.4, 1.0, 1.5);
  vec3 ambient = ambient_coeff * ambient_col;
  
  vec3 diffuse = dif_coeff * max(0.0,dot(normalize(fNormal),normalize(dif_pos))) * dif_col;
  //vec3 spec = spec_coeff *
  
  gl_FragColor = vec4(diffuse + heat + outline, 1.0);
}