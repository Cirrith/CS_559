//Vertex Shader

precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;

varying vec3 heat;
const float ambient_coeff = 0.5;
const vec3 ambient_col = vec3(1.0,0.3,0.0);

const float dif_coeff = 1.0;
const vec3 dif_pos = vec3(0.0,1.0,0.0);
const vec3 dif_col = vec3(1.0,1.0,1.0);

vec3 rim(vec3 color, float start, float end, float coef) {
  vec3 normal = normalize(fNormal);
  vec3 eye = normalize(-fPosition.xyz);
  float rim = smoothstep(start, end, 1.0 - dot(normal, eye));
  return clamp(rim, 0.0, 1.0) * coef * color;
}

void main() {
  vec3 outline = rim(vec3(1,1,1), 0.4, 1.0, 1.5);
  vec3 ambient = ambient_coeff * ambient_col;
  
  vec3 diffuse = dif_coeff * max(0.0,dot(normalize(fNormal),normalize(dif_pos))) * dif_col;
  //vec3 spec = spec_coeff *
  
  gl_FragColor = vec4(diffuse + heat + outline, 1.0);
}